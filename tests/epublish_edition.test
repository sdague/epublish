<?php
/**
 * Basic sanity testing for epublish
 */
require_once "epublish_test_case.inc";

class EPublishEditionTestCase extends EPublishTestCase {
  /**
   * User with rights to post SimpleTest Example content.
   */
  protected $privileged_user;
  protected $pub;
  protected $pub2;
  protected $ed;
  protected $ed2;

  /**
   * getInfo() returns properties that are displayed in the test selection form.
   */
  public static function getInfo() {
    return array(
      'name' => 'Epublish Edition Test',
      'description' => 'Ensure that epublish editions work as expected',
      'group' => 'EPublish',
    );
  }

  public function setUp() {
    parent::setUp('epublish');

    // Create and log in our privileged user.
    $this->privileged_user = $this->drupalCreateUser( array('administer publications'));
    $this->drupalLogin($this->privileged_user);

    $time = time() - 300;

    $this->drupalCreateNode(array("title" => "Page 1", "changed" => $time));
    $this->drupalCreateNode(array("title" => "Page 2", "changed" => $time + 10));
    $this->drupalCreateNode(array("title" => "Page 3", "changed" => $time + 20));
    $this->drupalCreateNode(array("title" => "Page 4", "changed" => $time + 30));
    $this->drupalCreateNode(array("title" => "Page 5", "changed" => $time + 40));

    $this->drupalCreateNode(array("title" => "Story 1", "type" => "story", "changed" => $time + 50));
    $this->drupalCreateNode(array("title" => "Story 2", "type" => "story", "changed" => $time + 60));
    $this->drupalCreateNode(array("title" => "Story 3", "type" => "story", "changed" => $time + 70));
    $this->drupalCreateNode(array("title" => "Story 4", "type" => "story", "changed" => $time + 80));
    $this->drupalCreateNode(array("title" => "Story 5", "type" => "story", "changed" => $time + 90));

    $this->pub = new EpubPub($this);
    $this->pub->createRandom();

    $this->pub2 = new EpubPub($this);
    $this->pub2->createRandom();

    $this->ed = $this->pub->createRandomEd();
    $this->ed2 = $this->pub->createRandomEd();

    $this->ed->addNodes(array(1, 4, 7, 10));
    $this->ed2->addNodes(array(10));
  }

  private function checkMassLinks($array, $noarray) {
    foreach ($array as $link) {
      $this->assertLink($link, 0, "Ensure $link is found");
    }
    foreach ($noarray as $link) {
      $this->assertNoLink($link, "Ensure $link is not found");
    }
  }

  /*
   * This basic test just ensures that the nodes were all in the right
   * places. Consider it a baseline for the rest of the tests.
   */
  public function testCheckNodes() {
    $this->drupalGet($this->ed->editLink());
    $edlinks = array("Page 1", "Page 4", "Story 2", "Story 5");
    $ednolinks = array("Page 2", "Page 3", "Page 5", "Story 1", "Story 3", "Story 4");
    $ed2links = array("Story 5");
    $ed2nolinks = array("Page 1", "Page 4", "Story 2", "Page 2", "Page 3", "Page 5", "Story 1", "Story 3", "Story 4");

    $this->checkMassLinks($edlinks, $ednolinks);

    $this->drupalPost(NULL, array(), t("Add more headlines"));

    /* the select list shouldn't display selected stories */
    $this->checkMassLinks($ednolinks, $edlinks);

    $this->drupalGet($this->ed2->editLink());
    $this->checkMassLinks($ed2links, $ed2nolinks);

    $this->drupalPost(NULL, array(), t("Add more headlines"));
    $this->checkMassLinks($ed2nolinks, $ed2links);
  }

  public function testRemoveNodes() {
    $this->drupalGet($this->ed->editLink());
    $form = array("nodes[4]" => TRUE, "nodes[7]" => TRUE, "operation" => "del");

    $this->drupalPost(NULL, $form, t("Update"));
    $edlinks = array("Page 1", "Story 5");
    $ednolinks = array("Page 4", "Story 2", "Page 2", "Page 3", "Page 5", "Story 1", "Story 3", "Story 4");

    /* TODO: this should really return to the edit screen for the page */
    $this->drupalGet($this->ed->editLink());
    $this->checkMassLinks($edlinks, $ednolinks);

    $this->drupalPost(NULL, array(), t("Add more headlines"));
    /* the select list shouldn't display selected stories */
    $this->checkMassLinks($ednolinks, $edlinks);
  }

  public function testArticleOrder() {
    $this->drupalGet($this->ed->editLink());
    $links = $this->xpath('//a[@class="headline-link"]');
    // TODO: this gets all the links, but the order is apparently less expected than I thought

    $data = array("weight_10" => -10, "weight_7" => -5, "weight_1" => 10);
    $this->drupalPost(NULL, $data, t("Update"));

    $this->drupalGet($this->ed->editLink());
    $links = $this->xpath('//a[@class="headline-link"]');

    $this->assertEqual($links[0][0], "Story 5", "Check position of Story 5");
    $this->assertEqual($links[1][0], "Story 2", "Check position of Story 2");
    $this->assertEqual($links[2][0], "Page 4", "Check position of Page 4");
    $this->assertEqual($links[3][0], "Page 1", "Check position of Page 1");

    $data = array("weight_10" => 2, "weight_7" => -1, "weight_1" => 1);
    $this->drupalPost(NULL, $data, t("Update"));

    // TODO: we should go back to this page, but instead we jump out
    $this->drupalGet($this->ed->editLink());
    $links = $this->xpath('//a[@class="headline-link"]');
    $this->assertEqual($links[0][0], "Story 2", "Check position of Story 2");
    $this->assertEqual($links[1][0], "Page 4", "Check position of Page 4");
    $this->assertEqual($links[2][0], "Page 1", "Check position of Page 1");
    $this->assertEqual($links[3][0], "Story 5", "Check position of Story 5");

    // $this->assert(TRUE, print_r($links, TRUE));
  }
}

?>