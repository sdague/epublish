<?php
/**
 * Basic sanity testing for epublish
 */
require_once "epublish_test_case.inc";

class EPublishEditionTestCase extends EPublishTestCase {
  /**
   * User with rights to post SimpleTest Example content.
   */
  protected $privileged_user;
  protected $pub;
  protected $pub2;
  protected $ed;
  protected $ed2;

  /**
   * getInfo() returns properties that are displayed in the test selection form.
   */
  public static function getInfo() {
    return array(
      'name' => 'Epublish Edition Test',
      'description' => 'Ensure that epublish editions work as expected',
      'group' => 'EPublish',
    );
  }

  public function setUp() {
    parent::setUp('epublish');

    // Create and log in our privileged user.
    $this->privileged_user = $this->drupalCreateUser( array('administer publications'));
    $this->drupalLogin($this->privileged_user);

    $this->drupalCreateNode(array("title" => "Page 1"));
    $this->drupalCreateNode(array("title" => "Page 2"));
    $this->drupalCreateNode(array("title" => "Page 3"));
    $this->drupalCreateNode(array("title" => "Page 4"));
    $this->drupalCreateNode(array("title" => "Page 5"));

    $this->drupalCreateNode(array("title" => "Story 1", "type" => "story"));
    $this->drupalCreateNode(array("title" => "Story 2", "type" => "story"));
    $this->drupalCreateNode(array("title" => "Story 3", "type" => "story"));
    $this->drupalCreateNode(array("title" => "Story 4", "type" => "story"));
    $this->drupalCreateNode(array("title" => "Story 5", "type" => "story"));

    $this->pub = new EpubPub($this);
    $this->pub->createRandom();

    $this->pub2 = new EpubPub($this);
    $this->pub2->createRandom();

    $this->ed = $this->pub->createRandomEd();
    $this->ed2 = $this->pub->createRandomEd();

    $this->ed->addNodes(array(1, 4, 7, 10));
    $this->ed2->addNodes(array(10));
}

  /*
   * This basic test just ensures that the nodes were all in the right
   * places. Consider it a baseline for the rest of the tests.
   */
  public function testCheckNodes() {
    $this->drupalGet($this->ed->editLink());
    $this->drupalPost(NULL, array(), t("Add more headlines"));

    $this->assertNoLink("Page 1", "Ensure Page 1 is not listed");
    $this->assertLink("Page 2", 0, "Ensure Page 2 is listed");
    $this->assertLink("Page 3", 0, "Ensure Page 3 is listed");
    $this->assertNoLink("Page 4", "Ensure Page 4 is not listed");
    $this->assertLink("Page 5", 0, "Ensure Page 5 is listed");
    $this->assertLink("Story 1", 0,  "Ensure Story 1 is listed");
    $this->assertNoLink("Story 2", "Ensure Story 2 is not listed");
    $this->assertLink("Story 3", 0, "Ensure Story 3 is listed");
    $this->assertLink("Story 4", 0, "Ensure Story 4 is listed");
    $this->assertNoLink("Story 5", "Ensure Story 5 is not listed");

    $this->drupalGet($this->ed2->editLink());
    $this->drupalPost(NULL, array(), t("Add more headlines"));

    $this->assertLink("Page 1", 0, "Ensure Page 1 is listed");
    $this->assertLink("Page 2", 0, "Ensure Page 2 is listed");
    $this->assertLink("Page 3", 0, "Ensure Page 3 is listed");
    $this->assertLink("Page 4", 0, "Ensure Page 4 is listed");
    $this->assertLink("Page 5", 0, "Ensure Page 5 is listed");
    $this->assertLink("Story 1", 0,  "Ensure Story 1 is listed");
    $this->assertLink("Story 2", 0, "Ensure Story 2 is listed");
    $this->assertLink("Story 3", 0, "Ensure Story 3 is listed");
    $this->assertLink("Story 4", 0, "Ensure Story 4 is listed");
    $this->assertNoLink("Story 5", "Ensure Story 5 is not listed");
}
}

?>