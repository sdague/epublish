<?php
/**
 * Basic sanity testing for epublish
 */



class EPublishBasicTestCase extends DrupalWebTestCase {
  /**
   * User with rights to post SimpleTest Example content.
   */
  protected $privileged_user;
  protected $epubs;

  /**
   * getInfo() returns properties that are displayed in the test selection form.
   */
  public static function getInfo() {
    return array(
      'name' => 'Epublish Basic Test',
      'description' => 'Ensure that epublish has minimal functionality for release',
      'group' => 'EPublish',
    );
  }

  /**
   * setUp() performs any pre-requisite tasks that need to happen.
   */
  public function setUp() {
    // Enable any modules required for the test.
    parent::setUp('epublish');

    // Create and log in our privileged user.
    $this->privileged_user = $this->drupalCreateUser( array('administer publications'));
    $this->drupalLogin($this->privileged_user);
}

  private function _createRandomPublication() {
    $edit = array();
    $edit['name'] = $this->randomName(8);
    $edit['description'] = $this->randomName(16);
    $this->epubs[] = $edit;

    $this->drupalPost('admin/epublish/add/publication', $edit, t('Submit'));
    $this->assertText(t('The publication "@title" has been added.', array('@title' => $edit['name'])));

}

  /**
   * Based on the number of items in publication, we'll figure out which links should exist here.
   */
  private function _checkFrontPage() {
    $this->drupalGet("epublish");
    for($i = 0; $i < 4; $i++) {
      $n = $i + 1;
      if ($i < count($this->epubs)) {
        $this->assertPattern("|epublish/$n|", "Link to the epublish edition exists");
        $this->assertLink($this->epubs[$i]['name'], 0, "Link name for epublish edition exists");
      } else {
        $this->assertNoPattern("|epublish/$n|", "Link to the epublish edition does not exist");
      }
    }
}

  /**
   * Check for the existance of links on the front page based on state that
   * we've generated so far
   */

  private function _checkEpublishLinks() {
    $this->drupalGet("admin/epublish");
    for ($i = 0; $i < 4; $i++) {
      $n = $i + 1;
      if ($i < count($this->epubs)) {
        $this->assertLinkLabel("view-publication-$n", 0, "Check for the existance of the view link for epub #$n");
        $this->assertLinkLabel("edit-publication-$n", 0, "Check for the existance of the view link for epub #$n");
        $this->assertLinkLabel("add-edition-to-publication-$n", 0, "Check for the existance of the view link for epub #$n");
      }
    }
}

  private function _checkEditables() {
    for($i = 0; $i < 4; $i++) {
      $n = $i + 1;
      if ($i < count($this->epubs)) {
        $this->drupalGet("admin/epublish/edit/publication/$n");
        $this->assertFieldById("edit-name", $this->epubs[$i]['name'], "checking the name was there");
        $this->assertFieldById("edit-description", $this->epubs[$i]['description'], "checking the name was there");
      } else {
        // Eventually we want to check that these things don't exist, but that's actually broken right now
        // $this->assertNoPattern("|epublish/$n|", "Link to the epublish edition exists");
      }
    }

}

  /**
   * This tests to ensure that I've created the links that I expect using the
   * label attribute on them. It's a bit nicer than the text checking.
   */

  protected function assertLinkLabel($label, $index = 0, $message = '', $group = 'Other') {
    $links = $this->xpath('//a[@label="' . $label . '"]');
    $message = ($message ?  $message : t('Link with label "!label" found.', array('!label' => $label)));
    return $this->assert(isset($links[$index]), $message, $group);
  }

  /**
   * Create a simpletest_example node using the node form.
   */
  public function testEpublishPublicationCreate() {
    // Create 3 publications to make sure it works
    // $this->_checkFrontPage();

    $this->_createRandomPublication();
    $this->_checkFrontPage();

    $this->_createRandomPublication();
    $this->_checkFrontPage();

    $this->_createRandomPublication();
    $this->_checkFrontPage();


    $this->_checkEditables();
    $this->_checkEpublishLinks();
    // now we know that we've got 3 publications, lets actually add editions
    // to one of them.



}
}

?>