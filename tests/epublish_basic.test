<?php
/**
 * Basic sanity testing for epublish
 */

include "epublish_classes.php";

class EPublishBasicTestCase extends DrupalWebTestCase {
  /**
   * User with rights to post SimpleTest Example content.
   */
  protected $privileged_user;
  protected $epubs;
  protected $eds;

  /**
   * getInfo() returns properties that are displayed in the test selection form.
   */
  public static function getInfo() {
    return array(
      'name' => 'Epublish Basic Test',
      'description' => 'Ensure that epublish has minimal functionality for release',
      'group' => 'EPublish',
    );
  }

  /**
   * setUp() performs any pre-requisite tasks that need to happen.
   */
  public function setUp() {
    // Enable any modules required for the test.
    parent::setUp('epublish');

    // Create and log in our privileged user.
    $this->privileged_user = $this->drupalCreateUser( array('administer publications'));
    $this->drupalLogin($this->privileged_user);

    $this->drupalCreateNode(array("title" => "Page 1"));
    $this->drupalCreateNode(array("title" => "Page 2"));
    $this->drupalCreateNode(array("title" => "Page 3"));
    $this->drupalCreateNode(array("title" => "Page 4"));
    $this->drupalCreateNode(array("title" => "Page 5"));

    $this->drupalCreateNode(array("title" => "Story 1", "type" => "story"));
    $this->drupalCreateNode(array("title" => "Story 2", "type" => "story"));
    $this->drupalCreateNode(array("title" => "Story 3", "type" => "story"));
    $this->drupalCreateNode(array("title" => "Story 4", "type" => "story"));
    $this->drupalCreateNode(array("title" => "Story 5", "type" => "story"));
}


  private function _checkPublicationForm() {
    $this->drupalGet("admin/epublish/add/publication");
    $this->assertFieldById("edit-name", '', "Name field exists");
    $this->assertFieldById("edit-description", '', "Description field exists");
    $this->assertFieldById("edit-schedule", '', "Hidden schedule field exists");
    $this->assertField("edit-current-eid", "Current eid field exists");
    $this->assertField("edit-layout-page", "Layout field exists");
    $this->assertField("edit-layout-list", "Layout list field exists");
    $this->assertField("edit-sid", "Section field exists");
}

  private function _checkSectionsForm() {
    $this->drupalGet("admin/epublish/sections");
    $this->assertLink("default", 0, "Ensure default topic exists");
    $this->assertText("-miscellaneous", "Ensure misc section exists");
    $this->assertLink("edit topic", 0, "Ensure that misc edit link exists");
}

  private function _createRandomPublication() {
    $edition = new EpubPub($this);
    $edition->createRandom();
    $this->epubs[] = $edition;

    // TODO: I should probably move this into the helper class, howerver the
    // visibility is wrong

    // $this->assertText(t('The publication "@title" has been added.', array('@title' => $edition->name)), "Checking that the title '" . $edition->name . "' for the publication was found" );
}

  /**
   * Based on the number of items in publication, we'll figure out which links should exist here.
   */
  private function _checkFrontPage() {
    $this->drupalGet("epublish");
    for($i = 0; $i < 4; $i++) {
      $n = $i + 1;
      if ($i < count($this->epubs)) {
        $epub = $this->epubs[$i];
        $link = $epub->viewLink();

        $this->assertPattern("|$link|", "Link to the epublish edition exists");
        $this->assertLink($epub->name, 0, "Link name for epublish edition exists");
      } else {
        // TODO: this makes an assumption that we start at one and order up, which is fine, but might be fragile.
        $this->assertNoPattern("|epublish/$n|", "Link to the epublish edition should not exist");
      }
    }
}

  /**
   * Check for the existance of links on the front page based on state that
   * we've generated so far
   */

  private function _checkEpublishLinks() {
    $this->drupalGet("admin/epublish");
    for ($i = 0; $i < 4; $i++) {
      if ($i < count($this->epubs)) {
        $epub = $this->epubs[$i];
        $n = $epub->id;
        $this->assertLinkLabel("view-publication-$n", 0, "Check for the existance of the view link for epub #$n");
        $this->assertLink($epub->name, 0, "Check that the name of the view link is correct");
        $this->assertLinkLabel("edit-publication-$n", 0, "Check for the existance of the view link for epub #$n");
        $this->assertLink(t('edit publication'), $i, "Check that the edit link is good");
        $this->assertLinkLabel("add-edition-to-publication-$n", 0, "Check for the existance of the view link for epub #$n");
        $this->assertLink(t('add edition'), $i, "Check that the add edition link is good");
      } else {
        // assertNoLink
      }
    }
}

  private function _checkEditables() {
    for($i = 0; $i < 4; $i++) {
      if ($i < count($this->epubs)) {
        $epub = $this->epubs[$i];
        $n = $epub->id;
        $this->drupalGet($epub->editLink());
        $this->assertFieldById("edit-name", $epub->name, "checking the name was there");
        $this->assertFieldById("edit-description", $epub->description, "checking the name was there");
      } else {
        // Eventually we want to check that these things don't exist, but that's actually broken right now
        // $this->assertNoPattern("|epublish/$n|", "Link to the epublish edition exists");
      }
    }

}

  private function _checkEditions() {
    foreach ($this->epubs as $pub) {
      foreach ($pub->eds as $ed) {
        $this->drupalGet($ed->editLink());
        $this->assertFieldById("edit-dateline", $ed->dateline, "Checking dateline is set correctly");
        $this->assertFieldById("edit-volume", $ed->volume, "Checking volume is set correctly");
        $this->assertFieldById("edit-number", $ed->number, "Checking number is set correctly");
        $this->assertFieldById("edit-description", $ed->description, "Checking description is set correctly");
        // TODO: need to add pub date
      }
    }
}

  private function _deleteEditionsCheck() {
    $pub = $this->epubs[1];
    foreach ($pub->eds as $tmp) {
      // first check to get delete confirmation screen
      $this->drupalGet($tmp->editLink());
      $this->drupalPost(NULL, array(), t("Delete"));
      $this->assertText(t('Are you sure you want to delete the "@dateline" edition from publication "@pubname"?', array("@dateline" => $tmp->dateline, "@pubname" => $pub->name)), "Ensure that we get the confirmation screen for delete");

      $ed = $pub->deleteEd($tmp->id);
      $link = $ed->editLink();
      $this->assertText(t('Deleted "@dateline" edition from publication "@pubname."', array("@dateline" => $tmp->dateline, "@pubname" => $pub->name)), "Ensure that delete works");
      $this->drupalGet("admin/epublish");
      $this->assertNoPattern("|$link|", "Ensure we've deleted things appropriately");

    }
}

  private function _addArticlesCheck() {
    $pub = $this->epubs[0];
    $ed = $pub->eds[0];
    $this->drupalGet($ed->editLink());
    $this->drupalPost(NULL, array(), t("Add more headlines"));

    $this->assertLink("Page 1", 0, "Ensure Page 1 is listed");
    $this->assertLink("Page 2", 0, "Ensure Page 2 is listed");
    $this->assertLink("Page 3", 0, "Ensure Page 3 is listed");
    $this->assertLink("Page 4", 0, "Ensure Page 4 is listed");
    $this->assertLink("Page 5", 0, "Ensure Page 5 is listed");
    $this->assertLink("Story 1", 0,  "Ensure Story 1 is listed");
    $this->assertLink("Story 2", 0, "Ensure Story 2 is listed");
    $this->assertLink("Story 3", 0, "Ensure Story 3 is listed");
    $this->assertLink("Story 4", 0, "Ensure Story 4 is listed");
    $this->assertLink("Story 5", 0, "Ensure Story 5 is listed");

    $form = array();
    $form["nodes[1]"] = TRUE;
    $form["nodes[2]"] = TRUE;
    $form["nodes[6]"] = TRUE;
    $form["nodes[7]"] = TRUE;

    $this->drupalPost(NULL, $form, t("Add checked items to this edition"));

    $this->assertField("edit-nodes-1", "Check for Page 1");
    $this->assertField("edit-nodes-2", "Check for Page 2");
    $this->assertField("edit-nodes-6", "Check for Page 6");
    $this->assertField("edit-nodes-7", "Check for Page 7");

    $this->drupalPost(NULL, array(), t("Add more headlines"));

    $this->assertNoLink("Page 1", "Ensure Page 1 is listed");
    $this->assertNoLink("Page 2", "Ensure Page 2 is listed");
    $this->assertLink("Page 3", 0, "Ensure Page 3 is listed");
    $this->assertLink("Page 4", 0, "Ensure Page 4 is listed");
    $this->assertLink("Page 5", 0, "Ensure Page 5 is listed");
    $this->assertNoLink("Story 1", "Ensure Story 1 is listed");
    $this->assertNoLink("Story 2", "Ensure Story 2 is listed");
    $this->assertLink("Story 3", 0, "Ensure Story 3 is listed");
    $this->assertLink("Story 4", 0, "Ensure Story 4 is listed");
    $this->assertLink("Story 5", 0, "Ensure Story 5 is listed");

}

  /**
   *
   *  Create an edition for a publication by index
   *
   */

  private function _createEdition($pub) {
    $ed = $pub->createRandomEd();
    $this->drupalGet("admin/epublish");
    $this->assertText(t("-@title", array("@title" => $ed->dateline)), "Ensure the edition is listed correctly on the top edit page");
    // TODO: I want to move where this goes to, so this is going to change.
}
  /**
   * This tests to ensure that I've created the links that I expect using the
   * label attribute on them. It's a bit nicer than the text checking.
   */

  public function assertLinkLabel($label, $index = 0, $message = '', $group = 'Other') {
    $links = $this->xpath('//a[@label="' . $label . '"]');
    $message = ($message ?  $message : t('Link with label "!label" found.', array('!label' => $label)));
    return $this->assert(isset($links[$index]), $message, $group);
  }


  /**
   * Create a simpletest_example node using the node form.
   */
  public function testEpublishPublicationCreate() {
    // Create 3 publications to make sure it works
    // $this->_checkFrontPage();

    $this->_checkPublicationForm();
    $this->_checkSectionsForm();

    $this->_createRandomPublication();
    $this->_checkFrontPage();
    $this->_checkSectionsForm();

    $this->_createRandomPublication();
    $this->_checkFrontPage();

    $this->_createRandomPublication();
    $this->_checkFrontPage();

    $this->_checkEditables();
    $this->_checkEpublishLinks();

    $this->_createEdition($this->epubs[0]);
    $this->_createEdition($this->epubs[0]);
    $this->_createEdition($this->epubs[0]);

    $this->_createEdition($this->epubs[1]);
    $this->_createEdition($this->epubs[1]);

    $this->_createEdition($this->epubs[2]);

    $this->_checkEditions();

    $this->_deleteEditionsCheck();
    // now we know that we've got 3 publications, lets actually add editions
    // to one of them.
    $this->_addArticlesCheck();

    // If you want to see the state of the database, uncomment below, which
    // breaks simple test and leaves the database laying around.
    // $this->_fooBar();
}

  /**
   *  These are utility functions for the subclasses to use
   */

  public function Get($url)
  {
    return $this->drupalGet($url);
}

  public function Post($one, $two, $three)
  {
    return $this->drupalPost($one, $two, $three);
}

  public function getEpubId($name) {
    $this->drupalGet("admin/epublish");
    $links = $this->xpath('//a[text()="' . $name . '"]');
    foreach($links[0]->attributes() as $n => $v) {
      if ($n == "href") {
        preg_match("/(\d+)$/", $v, $matches);
        return $matches[0];
      }
    }
    return 0;
}

  public function getEpubEdId($name) {
    $this->drupalGet("admin/epublish");
    if( preg_match("/-$name.*?\(<a href=\".*?(\d+)\">edit edition/", $this->content, $matches) ) {
      return $matches[1];
    } else {
      return 0;
    }
}

}

?>